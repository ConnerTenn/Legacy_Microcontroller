
AVR4Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000044  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000098  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007f  00000000  00000000  000000d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004c  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000077  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000086  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	0f c0       	rjmp	.+30     	; 0x22 <__bad_interrupt>
   4:	0e c0       	rjmp	.+28     	; 0x22 <__bad_interrupt>
   6:	0d c0       	rjmp	.+26     	; 0x22 <__bad_interrupt>
   8:	0c c0       	rjmp	.+24     	; 0x22 <__bad_interrupt>
   a:	0b c0       	rjmp	.+22     	; 0x22 <__bad_interrupt>
   c:	0a c0       	rjmp	.+20     	; 0x22 <__bad_interrupt>
   e:	09 c0       	rjmp	.+18     	; 0x22 <__bad_interrupt>
  10:	08 c0       	rjmp	.+16     	; 0x22 <__bad_interrupt>
  12:	07 c0       	rjmp	.+14     	; 0x22 <__bad_interrupt>
  14:	06 c0       	rjmp	.+12     	; 0x22 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61
  1e:	02 d0       	rcall	.+4      	; 0x24 <main>
  20:	0f c0       	rjmp	.+30     	; 0x40 <_exit>

00000022 <__bad_interrupt>:
  22:	ee cf       	rjmp	.-36     	; 0x0 <__vectors>

00000024 <main>:
void main()
{
	//DDRA = 0xFF;
	//DDRB = 0xFF;
	//DDRC = 0xFF;
	DDRD = 0xFF;
  24:	8f ef       	ldi	r24, 0xFF	; 255
  26:	81 bb       	out	0x11, r24	; 17
  28:	03 c0       	rjmp	.+6      	; 0x30 <main+0xc>
		{
			i = 0;
			//PORTA = ~PORTA;
			//PORTB = ~PORTB;
			//PORTC = ~PORTC;
			PORTD = ~PORTD;
  2a:	82 b3       	in	r24, 0x12	; 18
  2c:	80 95       	com	r24
  2e:	82 bb       	out	0x12, r24	; 18
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
		}
		i++;
  34:	01 96       	adiw	r24, 0x01	; 1
	DDRD = 0xFF;

	int i = 0;
	while (1)
	{
		if (i >= 10000)
  36:	27 e2       	ldi	r18, 0x27	; 39
  38:	80 31       	cpi	r24, 0x10	; 16
  3a:	92 07       	cpc	r25, r18
  3c:	b4 f7       	brge	.-20     	; 0x2a <main+0x6>
  3e:	fa cf       	rjmp	.-12     	; 0x34 <__CCP__>

00000040 <_exit>:
  40:	f8 94       	cli

00000042 <__stop_program>:
  42:	ff cf       	rjmp	.-2      	; 0x42 <__stop_program>
